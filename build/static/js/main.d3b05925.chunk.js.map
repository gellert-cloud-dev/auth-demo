{"version":3,"sources":["components/ToDoList/AddToDo.js","components/ToDoList/DisplayToDos.js","components/ToDoList/ToDoList.js","components/AuthToDoApp/AuthToDoApp.js","App.js","serviceWorker.js","index.js"],"names":["AddToDo","setNextToDo","createToDo","nextToDo","onSubmit","onChange","e","target","value","updateToDo","type","DisplayToDos","list","statusChange","deleteToDo","mystyle","textDecoration","length","map","td","i","key","style","complete","title","marginLeft","onClick","ToDoList","props","useState","ToDo","setToDo","preventDefault","copy","filter","loginRequest","scopes","AuthToDoApp","useMsal","instance","accounts","inProgress","useEffect","testACCt","getAllAccounts","console","log","margin","minWidth","maxWidth","padding","textAlign","logout","catch","error","loginPopup","pca","msal","auth","clientId","authority","redirectUri","cache","cacheLocation","App","className","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.d3b05925.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst AddToDo = ({setNextToDo, nextToDo, createToDo}) => {\r\n    //update form prop as input changes\r\n    const updateToDo = (e) => {\r\n        setNextToDo(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <form onSubmit={ createToDo }>\r\n                <input onChange={ (e) => updateToDo(e) } />\r\n                <input type={'submit'} value={'Add To Do'}/>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\nexport default AddToDo;","import React from 'react'\r\n\r\nconst DisplayToDos = ({list, statusChange, deleteToDo}) =>{\r\n    //recieve an array of to dos and map them into elements to display\r\n    \r\n    const mystyle = {\r\n        textDecoration: \"line-through\",\r\n    }\r\n\r\n    return(\r\n        <>\r\n        Display To Do's below\r\n        {list.length !== 0 && list.map( (td, i) => {\r\n            return(\r\n                <p key={i}>\r\n                    <input type={'checkbox'} onChange={ () => statusChange(i) }/>\r\n                    <span style={ td.complete ? mystyle : null } >{td.title}</span>\r\n                    <button style={{ marginLeft : \"10px\"}} onClick={ () => deleteToDo(i) }>Delete</button>\r\n                </p>)\r\n            } \r\n        )}\r\n        </>\r\n    )\r\n}\r\nexport default DisplayToDos;","import React,{ useState } from 'react'\r\nimport AddToDo from './AddToDo'\r\nimport DisplayToDos from './DisplayToDos'\r\n\r\nconst ToDoList = (props) => {\r\n\r\n    const [nextToDo, setNextToDo] = useState('') \r\n\r\n    const [ToDo, setToDo] = useState([\r\n        {title: 'Get Black Belt', complete: false}, \r\n        {title: 'Get Red Belt', complete: false}, \r\n        {title: 'Get Yellow Belt', complete: false}\r\n    ])\r\n\r\n\r\n    // function for adding todo\r\n    const createToDo = (e) =>{\r\n        e.preventDefault()\r\n        setToDo([...ToDo, {title: nextToDo, complete: false}])\r\n    }\r\n\r\n    //toggle complete\r\n    const complete = (i) => {\r\n        let copy = [...ToDo]\r\n        copy[i].complete = !copy[i].complete\r\n        setToDo(copy)\r\n    }\r\n\r\n    // function for deleting\r\n    const deleteToDo = (i) => {\r\n        // console.log(\"Deleting \", i)\r\n        setToDo(ToDo.filter( td => td !== ToDo[i]))\r\n    }\r\n\r\n    return(\r\n        <div style={props.style}>\r\n            To Do List\r\n            <AddToDo setNextToDo={ setNextToDo } nextToDo={nextToDo} createToDo={ createToDo }/>\r\n            <DisplayToDos list={ ToDo } statusChange={ complete } deleteToDo={ deleteToDo }/>\r\n        </div>\r\n    )\r\n}\r\nexport default ToDoList;","import React, { useEffect } from 'react'\r\nimport ToDoListApp from '../ToDoList/ToDoList' \r\n\r\n// import * as msal from \"@azure/msal-browser\";\r\nimport { AuthenticatedTemplate, MsalProvider, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\n\r\n// const configuration = {\r\n//     auth: {\r\n//         clientId: \"1877b32e-fba5-4a06-a0fd-6f867ba4ea01\",\r\n//         authority: \"https://login.microsoftonline.com/common\",\r\n//         redirectUri: \"http://localhost:3000\",\r\n//     }\r\n// };\r\n\r\nconst loginRequest = {\r\n    scopes: [\"openid\", \"profile\", \"User.Read\"]\r\n};\r\n\r\n// const pca = new msal.PublicClientApplication(configuration);\r\n\r\nconst AuthToDoApp = (props) => {\r\n\r\n    const { instance, accounts, inProgress } = useMsal()\r\n    useEffect(()=>{\r\n        // instance.loginPopup(loginRequest)\r\n        //     .catch(error => console.log(error))\r\n        let testACCt = instance.getAllAccounts()\r\n        // instance.ssoSilent({loginHint:  testACCt[0].username })\r\n        console.log(accounts, instance, testACCt)\r\n    },[])\r\n\r\n    \r\n\r\n    const userStatus = () => {\r\n        if (accounts.length > 0) {\r\n            return <span>There are currently {accounts.length} users signed in!</span>\r\n        } else if (inProgress === \"login\") {\r\n            return <span>Login is currently in progress!</span>\r\n        } else {\r\n            return (\r\n                <>\r\n                    <span>There are currently no users signed in!</span><br/>\r\n                    <button style={{margin: '10px', padding: '5px 10px'}} \r\n                        onClick={() => \r\n                            instance.loginPopup(loginRequest)\r\n                                .catch(error => console.log(error))\r\n                        }    \r\n                    >\r\n                       Login\r\n                    </button>\r\n\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div\r\n            style={{margin:'auto', minWidth:'50%', maxWidth:'900px', padding:'20px', textAlign: 'center'}}\r\n        >\r\n\r\n            <h1>\r\n                Atheniticated To do App:\r\n            </h1>\r\n            <AuthenticatedTemplate>\r\n                <ToDoListApp \r\n\r\n                />  \r\n                <button style={{margin: '10px', padding: '5px 10px'}} \r\n                        onClick={() => \r\n                            instance.logout(loginRequest)\r\n                                .catch(error => console.log(error))\r\n                        }    \r\n                >\r\n                    Logout\r\n                </button>\r\n            </AuthenticatedTemplate>\r\n\r\n            <UnauthenticatedTemplate >\r\n                <p style={{textAlign: 'center'}}>No users are signed in!</p>\r\n            </UnauthenticatedTemplate>\r\n\r\n            <h4>\r\n                { userStatus() }\r\n            </h4>\r\n\r\n        </div>\r\n)}\r\nexport default AuthToDoApp;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// import First_Project from './components/First_Project/First_Project'\n// import Prop_It_Up from './components/Prop_It_Up/Prop_It_Up'\n// import Plotting_Blocks from './components/Plotting_Blocks/Plotting_Blocks'\n//below is for Big_Inversion\n// import Prop_It_Up from './components/Big_Inversion/Prop_It_Up'\n// import HookForm from './components/Hook_Form/HookForm'\n// import More_Forms from './components/More_Forms/More_Forms'\n// import ValidateFormReducer from './components/ValidateFormReducer/ValidateFormReducer'\n// import BoxGenerator from './components/BoxGenerator/BoxGenerator'\n// import Tabs from './components/Tabs/Tabs'\n// import PokemonApi from './components/PokemonApi/PokemonApi'\n// import AxiosPokemonApi from './components/AxiosPokemonApi/AxiosPokemonApi'\n// import RoutingPractice from './components/RoutingPractice/RoutingPractice'\n// import LukeApiWalker from './components/LukeApiWalker/LukeApiWalker'\n// import SocketPractice from './components/SocketPractice/SocketPractice'\n// import SocketChat from './components/SocketChat/SocketChat'\n// import ToDoList from './components/ToDoList/ToDoList'\n// import AgriStar2List from './components/GellertAgriStar2Test/index'\n\nimport AuthToDoApp from './components/AuthToDoApp/AuthToDoApp'\nimport * as msal from \"@azure/msal-browser\";\nimport { MsalProvider } from '@azure/msal-react';\n\n\nconst configuration = {\n  auth: {\n      clientId: \"1877b32e-fba5-4a06-a0fd-6f867ba4ea01\",\n      authority: \"https://login.microsoftonline.com/common\",\n      redirectUri: \"http://localhost:3000\",\n  },\n  cache: {\n    cacheLocation: \"localStorage\", // This configures where your cache will be stored\n    // storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n  },\n  // system:{\n    // windowHashTimeout: 60000,\n    // iframeHashTimeout: 6000,\n    // loadFrameTimeout: 0,\n    // asyncPopups: true\n  // }\n};\n\nconst pca = new msal.PublicClientApplication(configuration);\n\n\nfunction App() {\n  return (\n    <div className={'wrapper'} >\n      <MsalProvider instance={pca}>\n        <AuthToDoApp />\n      </MsalProvider>\n      {/* <AgriStar2List /> */}\n      {/* <ToDoList style={{margin:'auto', maxWidth:'50%', padding:'20px'}}/> */}\n      {/* <SocketChat /> */}\n      {/* <SocketPractice/> */}\n      {/* <LukeApiWalker/> */}\n      {/* <RoutingPractice /> */}\n      {/* <AxiosPokemonApi/> */}\n      {/* <PokemonApi/> */}\n      {/* <Tabs/> */}\n      {/* <BoxGenerator/> */}\n      {/* <ValidateFormReducer/> */}\n      {/* <More_Forms/> */}\n      {/* <HookForm/> */}\n      {/* <Plotting_Blocks /> */}\n      {/* <First_Project /> */}\n      {/* <Prop_It_Up /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n  {/* <React.StrictMode> */}\n    <App />\n  {/* </React.StrictMode>, */}\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}